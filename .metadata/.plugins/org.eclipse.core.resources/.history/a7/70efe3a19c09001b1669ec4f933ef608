import tester.*;

class Block {  
  int height;  
  String color;  
  
  Block(int height, String color) {    
    this.height = height;    
    this.color = color;  
  }
  
  // returns true if the height of this Block is greater than the height of that Block
  boolean compareHeight(Block that) {
    return this.height > that.height;
  }
  
  // is this block's color "red"?
  boolean isRed() {
    return this.color.compareTo("red") == 0;
  }
  
  // is this Block's color "blue"?
  boolean isBlue() {
    return this.color.compareTo("blue") == 0;
  }
}

interface ILoBlock {
  // returns the list of blocks that are strictly increasing in height
  ILoBlock increasing();
  
  // accumulates blocks in order of increasing height for this ILoBlock
  ILoBlock increasingAcc(Block prev);
  
  // does this list contain blocks alternating between red and blue colors, starting with red?
  boolean alternatingRB();
  
  boolean alternatingHelp(boolean expectRed);
  
}

class MtLoBlock implements ILoBlock {

  @Override
  public ILoBlock increasing() {
    return this;
  }

  @Override
  public ILoBlock increasingAcc(Block prev) {
    return this;
  }

  @Override
  public boolean alternatingRB() {
    return true;
  }

  @Override
  public boolean alternatingHelp(boolean expectRed) {
    return true;
  }

}

class ConsLoBlock implements ILoBlock {  
  Block first;  
  ILoBlock rest;  
  
  ConsLoBlock(Block first, ILoBlock rest) {    
    this.first = first;    
    this.rest = rest;  
  }

  @Override
  public ILoBlock increasing() {
    return this.rest.increasingAcc(this.first);
  }

  @Override
  public ILoBlock increasingAcc(Block prev) {
    if (this.first.compareHeight(prev)) {
      
      return new ConsLoBlock(prev, this.rest.increasingAcc(this.first));
    }
    else {
      return new ConsLoBlock(prev, new MtLoBlock());
    }
  }

  @Override
  public boolean alternatingRB() {
    return this.alternatingHelp(true);
  }

  @Override
  public boolean alternatingHelp(boolean expectRed) {
    if (expectRed && this.first.isRed()) {
      return this.rest.alternatingHelp(false);
    }
    else if (!expectRed && this.first.isBlue()) {
      return this.rest.alternatingHelp(true);
    }
    else {
      return false;
    }
  }

}

class ExamplesBlocks {    
  Block redBlock1 = new Block(1, "red");    
  Block redBlock2 = new Block(3, "red");    
  Block blueBlock1 = new Block(2, "blue");    
  Block blueBlock2 = new Block(4, "blue");    
  ILoBlock mt = new MtLoBlock();    
  ILoBlock list1 = new ConsLoBlock(blueBlock1, mt);    
  ILoBlock list2 = new ConsLoBlock(redBlock2, list1);    
  ILoBlock list3 = new ConsLoBlock(blueBlock1, list2);    
  ILoBlock list4 = new ConsLoBlock(redBlock1, list3);
  ILoBlock list5 = new ConsLoBlock(blueBlock1, 
      new ConsLoBlock(redBlock1, 
          new ConsLoBlock(redBlock2, mt)));
  
  boolean testIncreasing(Tester t) {
    return t.checkExpect(this.mt.increasing(), this.mt)
        && t.checkExpect(this.list4.increasing(),
            new ConsLoBlock(this.redBlock1, 
                new ConsLoBlock(this.blueBlock1, 
                    new ConsLoBlock(this.redBlock2, this.mt))))
        && t.checkExpect(this.list5.increasing(), 
            new ConsLoBlock(this.blueBlock1, this.mt));
  }
  
  boolean testAlternatingRB(Tester t) {
    return t.checkExpect(this.mt.alternatingRB(), true)
        && t.checkExpect(this.list4.alternatingRB(), true)
        && t.checkExpect(this.list5.alternatingRB(), false);
  }
  
}